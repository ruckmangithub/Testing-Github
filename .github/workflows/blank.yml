# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
    
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
    - name: ServiceNow DevOps Change Automation
      # You may pin to the exact commit or the version.
      # uses: ServiceNow/servicenow-devops-change@373e092812580f05105089c20129e6efe347c8e5
      uses: ServiceNow/servicenow-devops-change@v4.0.0
      with:
        # ServiceNow Instance URL
        instance-url: "https://virtevademo9.service-now.com/"
        # Devops Integration User Name
        #devops-integration-user-name: # optional
        # Devops Integration User Password
        #devops-integration-user-password: # optional
        # Devops Integration Token
        devops-integration-token: "AxgNabNd3prhZX5tZuuGizh4EEJMeMHZ"
        # Orchestration Tool Id
        tool-id: "2caff0f11bcc125028cba9bd2a4bcbe8"
        # Display Name of the Job
        job-name: "Prod Deploy"
        # Github Context
        context-github: ${{ toJSON(github) }}
        # The max. time in seconds to wait until the action should fail.
        #timeout: "3600" # optional, default is 3600
        # The time in seconds to wait between trying the API.
        #interval: # optional, default is 100
        # The customized inputs to create change with the requested details.
        change-request: '{"setCloseCode":"true","autoCloseChange":true,"attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}' 
        # The max. time in seconds to wait until change created.
        #changeCreationTimeOut: # optional, default is 3600
        # This value will be used to resume or abort the pipeline if the change is not created within the mentioned time period in changeCreationTimeOut. 
        #abortOnChangeCreationFailure: # optional, default is true
        # This value will be used to resume or abort the pipeline after a timeout has occurred in case a change step is still in a pending state.
        #abortOnChangeStepTimeout: # optional, default is true
        # The customized inputs to process deployment gate job related change.
        #deployment-gate: # optional
          
     
          
